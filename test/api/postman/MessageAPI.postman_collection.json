{
	"info": {
		"_postman_id": "627d85a0-7b8a-4ae7-a0ad-d7c7677c18c8",
		"name": "MessageAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(jsonData).to.have.property(\"_embedded\");\r",
							"    pm.expect(jsonData).to.have.property(\"_links\");\r",
							"    const firstMessage = jsonData._embedded.messageList[0];\r",
							"    pm.expect(firstMessage).to.have.property(\"id\");\r",
							"    pm.expect(firstMessage).to.have.property(\"text\");\r",
							"    pm.expect(firstMessage).to.have.property(\"isPalindrome\");\r",
							"    pm.expect(firstMessage).to.have.property(\"_links\");\r",
							"    pm.expect(firstMessage._links).to.have.property(\"self\");\r",
							"    pm.expect(firstMessage._links).to.have.property(\"messages\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/messages",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "GETOne",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"    pm.expect(jsonData.text).to.eql(\"Hi\");\r",
							"    pm.expect(jsonData.isPalindrome).to.eql(false);\r",
							"    pm.expect(jsonData).to.have.property(\"_links\");\r",
							"    pm.expect(jsonData._links).to.have.property(\"self\");\r",
							"    pm.expect(jsonData._links).to.have.property(\"messages\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/messages/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"messages",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 201\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.expect(jsonData.text).to.eql(\"abcba\");\r",
							"    pm.expect(jsonData.isPalindrome).to.eql(true);\r",
							"    pm.expect(jsonData).to.have.property(\"_links\");\r",
							"    pm.expect(jsonData._links).to.have.property(\"self\");\r",
							"    pm.expect(jsonData._links).to.have.property(\"messages\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\" : \"abcba\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/messages",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 201\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.expect(jsonData.id).to.eql(\"3\");\r",
							"    pm.expect(jsonData.text).to.eql(\"bacba\");\r",
							"    pm.expect(jsonData.isPalindrome).to.eql(false);\r",
							"    pm.expect(jsonData).to.have.property(\"_links\");\r",
							"    pm.expect(jsonData._links).to.have.property(\"self\");\r",
							"    pm.expect(jsonData._links).to.have.property(\"messages\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\" : \"bacba\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/messages/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"messages",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function() {\r",
							"    pm.response.to.have.status(204);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/messages/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"messages",
						"3"
					]
				}
			},
			"response": []
		}
	]
}